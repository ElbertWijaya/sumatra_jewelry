generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  username     String  @unique
  passwordHash String
  roleId       Int
  active       Boolean @default(true)
  role         Role    @relation(fields: [roleId], references: [id])
  ordersCreated Order[] @relation("OrdersCreated")
  auditLogs    AuditLog[]
  subtaskCompletions SubtaskCompletion[]
  verificationRequests VerificationRequest[] @relation("VerificationRequester")
  verificationDecisions VerificationRequest[] @relation("VerificationDecider")
}

model Stage {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  displayName String
  orderIndex  Int
  isTerminal  Boolean  @default(false)
  allowsReturn Boolean @default(false)
  subtasks    StageSubtask[]
  stageProgress OrderStageProgress[]
}

model StageSubtask {
  id       Int    @id @default(autoincrement())
  stageId  Int
  name     String
  active   Boolean @default(true)
  stage    Stage  @relation(fields: [stageId], references: [id])
  completions SubtaskCompletion[]
}

model Order {
  id             Int      @id @default(autoincrement())
  orderCode      String   @unique
  customerName   String
  itemType       String
  material       String?
  size           String?
  notes          String?
  createdByUserId Int
  currentStageId Int?
  status         OrderStatus @default(ACTIVE)
  dueDate        DateTime?
  canceledReason String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  createdByUser  User   @relation("OrdersCreated", fields: [createdByUserId], references: [id])
  currentStage   Stage? @relation(fields: [currentStageId], references: [id])

  stageProgress  OrderStageProgress[]
  subtaskCompletions SubtaskCompletion[]
  verificationRequests VerificationRequest[]
  files          OrderFile[]
  inventoryRecords InventoryRecord[]
  auditLogs      AuditLog[]
}

enum OrderStatus {
  ACTIVE
  DONE
  CANCELED
}

model OrderStageProgress {
  id           Int      @id @default(autoincrement())
  orderId      Int
  stageId      Int
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  completedByUserId Int?
  order        Order   @relation(fields: [orderId], references: [id])
  stage        Stage   @relation(fields: [stageId], references: [id])
}

model SubtaskCompletion {
  id         Int      @id @default(autoincrement())
  orderId    Int
  stageId    Int
  subtaskId  Int
  completedByUserId Int
  completedAt DateTime @default(now())
  order      Order @relation(fields: [orderId], references: [id])
  stage      Stage @relation(fields: [stageId], references: [id])
  subtask    StageSubtask @relation(fields: [subtaskId], references: [id])
  user       User @relation(fields: [completedByUserId], references: [id])
}

model VerificationRequest {
  id          Int      @id @default(autoincrement())
  orderId     Int
  stageId     Int
  requestedByUserId Int
  requestedAt DateTime @default(now())
  status      VerificationStatus @default(PENDING)
  decidedByUserId Int?
  decidedAt   DateTime?
  note        String?

  order       Order @relation(fields: [orderId], references: [id])
  stage       Stage @relation(fields: [stageId], references: [id])
  requester   User  @relation("VerificationRequester", fields: [requestedByUserId], references: [id])
  decider     User? @relation("VerificationDecider", fields: [decidedByUserId], references: [id])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model OrderFile {
  id        Int      @id @default(autoincrement())
  orderId   Int
  stageId   Int?
  fileType  String
  filename  String
  mimeType  String
  uploadedByUserId Int
  uploadedAt DateTime @default(now())

  order     Order @relation(fields: [orderId], references: [id])
  stage     Stage? @relation(fields: [stageId], references: [id])
}

model InventoryRecord {
  id        Int      @id @default(autoincrement())
  orderId   Int?
  recordType String
  quantity  Float?
  unit      String?
  note      String?
  createdAt DateTime @default(now())
  order     Order? @relation(fields: [orderId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  orderId   Int?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User? @relation(fields: [userId], references: [id])
  order     Order? @relation(fields: [orderId], references: [id])
}