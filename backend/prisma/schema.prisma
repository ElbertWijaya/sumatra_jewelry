// ...existing code...

model account {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  job_role  String
  password  String
  branch_id Int
  phone     String?
  address   String?
  created_at DateTime @default(now())
  branch    branch   @relation(fields: [branch_id], references: [id])
  ordersCreated Order[] @relation("OrderCreatedBy")
  ordersUpdated Order[] @relation("OrderUpdatedBy")
  orderTasksAssigned OrderTask[] @relation("OrderTaskAssignedTo")
  orderTasksValidated OrderTask[] @relation("OrderTaskValidatedBy")
  orderTasksChecked OrderTask[] @relation("OrderTaskCheckedBy")
  inventoryItemsCreated InventoryItem[] @relation("InventoryItemCreatedBy")
  inventoryItemsUpdated InventoryItem[] @relation("InventoryItemUpdatedBy")
  orderHistories OrderHistory[]
}

model branch {
  id      Int      @id @default(autoincrement())
  name    String
  address String?
  accounts account[]
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Order {
  id           Int       @id @default(autoincrement()) @map("id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  code         String?   @unique @map("code")
  customerName String    @map("customer_name")
  customerAddress String? @map("customer_address")
  customerPhone String?  @map("customer_phone")
  jenisBarang   String   @map("item_type") // previously 'jenis'
  jenisEmas     String   @map("gold_type")
  warnaEmas     String   @map("gold_color")
  hargaEmasPerGram Decimal? @db.Decimal(14,2) @map("gold_price_per_gram")
  hargaPerkiraan  Decimal? @db.Decimal(14,2) @map("estimated_price")
  hargaAkhir      Decimal? @db.Decimal(14,2) @map("final_price")
  dp            Decimal?  @db.Decimal(14,2) @map("down_payment")
  promisedReadyDate DateTime? @map("promised_ready_date")
  tanggalSelesai  DateTime? @map("completed_date")
  tanggalAmbil    DateTime? @map("pickup_date")
  catatan       String?  @map("notes")
  fotoDesainUrl String?  @map("design_image_url")
  referensiGambarUrls Json?   @map("reference_image_urls") // array of strings
  stoneCount    Int      @default(0) @map("stone_count")
  totalBerat    Decimal? @db.Decimal(10,2) @map("total_stone_weight")
  status        OrderStatus @default(DRAFT) @map("status")
  createdById   String? @map("created_by_id")
  updatedById   String? @map("updated_by_id")
  createdBy    account? @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedBy    account? @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  histories    OrderHistory[]
  stones       OrderStone[]
  tasks        OrderTask[]
  inventoryItems InventoryItem[]
  ringSize     String?   @map("ring_size")
}

model OrderStone {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  bentuk   String
  jumlah   Int
  berat    Decimal? @db.Decimal(10,2)
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([bentuk])
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  changedAt  DateTime @default(now())
  user       account? @relation(fields: [userId], references: [id])
  userId     String?
  changeSummary String?
  diff       Json?
  // Richer audit fields
  action      OrderHistoryAction @default(UPDATED)
  actorName   String?
  actorRole   TaskJobRole?
  statusFrom  OrderStatus?
  statusTo    OrderStatus?
  field       String?
  prev        Json?
  next        Json?
  context     Json?
  groupId     String?
  orderCode   String?
  snapshot    Json?

  @@index([orderId, changedAt])
  @@index([action])
  @@index([field])
  @@index([userId])
}

enum OrderHistoryAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  NOTE_ADDED
  TASK_EVENT
  DELETED
}

model OrderTask {
  id            Int       @id @default(autoincrement())
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       Int
  stage         String?   @map("stage")
  status        TaskStatus @default(OPEN) @map("status")
  assignedTo    account?  @relation("OrderTaskAssignedTo", fields: [assignedToId], references: [id])
  assignedToId  String?   @map("assigned_to_id")
  jobRole       TaskJobRole? @map("job_role")
  requestedDoneAt DateTime? @map("requested_done_at")
  validatedBy   account?  @relation("OrderTaskValidatedBy", fields: [validatedById], references: [id])
  validatedById String?   @map("validated_by_id")
  validatedAt   DateTime? @map("validated_at")
  notes         String?   @map("notes")
  // Progress check by assignee
  isChecked     Boolean   @default(false) @map("is_checked")
  checkedAt     DateTime? @map("checked_at")
  checkedBy     account?  @relation("OrderTaskCheckedBy", fields: [checkedById], references: [id])
  checkedById   String?   @map("checked_by_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([orderId])
  @@index([assignedToId])
}

model InventoryItem {
  id           Int       @id @default(autoincrement())
  order        Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId      Int?
  code         String?   @map("code")
  name         String?   @map("name")
  category     String?   @map("category")
  material     String?   @map("material")
  karat        String?   @map("karat")
  goldType     String?   @map("gold_type")
  goldColor    String?   @map("gold_color")
  weightGross  Decimal?  @db.Decimal(10,2) @map("weight_gross")
  weightNet    Decimal?  @db.Decimal(10,2) @map("weight_net")
  stoneCount   Int?      @map("stone_count")
  stoneWeight  Decimal?  @db.Decimal(10,2) @map("stone_weight")
  size         String?   @map("size")
  dimensions   String?   @map("dimensions")
  barcode      String?   @unique @map("barcode")
  sku          String?   @unique @map("sku")
  location     String?   @map("location")
  cost         Decimal?  @db.Decimal(14,2) @map("cost")
  price        Decimal?  @db.Decimal(14,2) @map("price")
  status       String?   @map("status")
  images       Json?     @map("images")
  notes        String?   @map("notes")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  createdBy    account?  @relation("InventoryItemCreatedBy", fields: [createdById], references: [id])
  createdById  String?   @map("created_by_id")
  updatedBy    account?  @relation("InventoryItemUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?   @map("updated_by_id")

  @@index([orderId])
  @@index([barcode])
  @@index([sku])
}

enum TaskStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  AWAITING_VALIDATION
  DONE
  CANCELLED
}

enum TaskJobRole {
  ADMINISTRATOR
  SALES
  DESIGNER
  CASTER
  CARVER
  DIAMOND_SETTER
  FINISHER
  INVENTORY
}


enum OrderStatus {
  DRAFT
  DITERIMA
  DALAM_PROSES
  SIAP
  DIAMBIL
  BATAL
}

/// After migration, run a script to backfill the code field: TM-YYYYMM-XXXX
