generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppUser {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  role      Role
  password  String
  createdAt DateTime @default(now())
  ordersCreated Order[] @relation("OrdersCreated")
  ordersUpdated Order[] @relation("OrdersUpdated")
  histories OrderHistory[]
}

model Order {
  id           Int       @id @default(autoincrement()) @map("id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  code         String?   @unique @map("code")
  customerName String    @map("customer_name")
  customerAddress String? @map("customer_address")
  customerPhone String?  @map("customer_phone")
  jenisBarang   String   @map("item_type") // previously 'jenis'
  jenisEmas     String   @map("gold_type")
  warnaEmas     String   @map("gold_color")
  hargaEmasPerGram Decimal? @db.Decimal(14,2) @map("gold_price_per_gram")
  hargaPerkiraan  Decimal? @db.Decimal(14,2) @map("estimated_price")
  hargaAkhir      Decimal? @db.Decimal(14,2) @map("final_price")
  dp            Decimal?  @db.Decimal(14,2) @map("down_payment")
  promisedReadyDate DateTime? @map("promised_ready_date")
  tanggalSelesai  DateTime? @map("completed_date")
  tanggalAmbil    DateTime? @map("pickup_date")
  catatan       String?  @map("notes")
  fotoDesainUrl String?  @map("design_image_url")
  referensiGambarUrls Json?   @map("reference_image_urls") // array of strings
  stoneCount    Int      @default(0) @map("stone_count")
  totalBerat    Decimal? @db.Decimal(10,2) @map("total_stone_weight")
  status        OrderStatus @default(DRAFT) @map("status")
  createdById   String? @map("created_by_id")
  updatedById   String? @map("updated_by_id")
  createdBy    AppUser? @relation("OrdersCreated", fields: [createdById], references: [id])
  updatedBy    AppUser? @relation("OrdersUpdated", fields: [updatedById], references: [id])
  histories    OrderHistory[]
  stones       OrderStone[]
}

model OrderStone {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  bentuk   String
  jumlah   Int
  berat    Decimal? @db.Decimal(10,2)
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([bentuk])
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  changedAt  DateTime @default(now())
  user       AppUser? @relation(fields: [userId], references: [id])
  userId     String?
  changeSummary String?
  diff       Json?
}

enum Role {
  admin
  kasir
  owner
  pengrajin
}

enum OrderStatus {
  DRAFT
  DITERIMA
  DALAM_PROSES
  SIAP
  DIAMBIL
  BATAL
}

/// After migration, run a script to backfill the code field: TM-YYYYMM-XXXX
